name: Backend CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: pip install black flake8
        
      - name: Create .flake8 configuration file
        run: |
          echo "[flake8]" > .flake8
          echo "max-line-length = 200" >> .flake8
          echo "extend-ignore = E402" >> .flake8
          
      - name: Run Black
        run: black .
      
      - name: Run Flake8
        run: flake8 .

  backend-tests:
    name: Backend Unit Tests
    needs: backend-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: pip install pytest
      
      - name: Add sample test
        run: |
          mkdir -p backend/tests
          printf 'import unittest\n\nclass TestLibrary(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual("foo".upper(), "FOO")\n\n    def test_isupper(self):\n        self.assertTrue("FOO".isupper())\n        self.assertFalse("Foo".isupper())\n\n    def test_split(self):\n        s = "hello world"\n        self.assertEqual(s.split(), ["hello", "world"])\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == "__main__":\n    unittest.main()\n' > backend/tests/test_library.py
      
      - name: Run tests
        run: |
          echo "Running pytest..."
          pytest backend/tests

  build:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-tests]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      
      - name: Build Docker image
        run: docker build -t backend-app jobs/backend/Dockerfile
